# Code generated by font_to_py.py.
# Font: icofont.ttf Char set: ABCDEF
# Cmd: /mnt/qnap2/data/Projects/MicroPython/micropython-font-to-py/font_to_py.py icofont.ttf 12 -x -c ABCDEF icons1.py
version = '0.33'

def height():
    return 12

def baseline():
    return 12

def max_width():
    return 15

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 65

def max_ch():
    return 70

_font =\
b'\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x3f\xe0'\
b'\x3f\xe0\x3f\xe0\x3f\xe0\x3f\xe0\x3f\xe0\x3f\xe0\x3f\xe0\x3f\xe0'\
b'\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x61\x80\x61\x80\x61\x80'\
b'\x61\x80\x61\x80\x61\x80\x61\x80\x61\x80\x61\x80\x00\x00\x0f\x00'\
b'\x00\x00\x70\x00\x7f\x00\x0f\xf0\x00\xfc\x00\x7c\x01\xf0\x0f\x80'\
b'\x7e\x00\x70\x00\x40\x00\x00\x00\x0f\x00\x00\x06\x00\x3e\x01\xf8'\
b'\x0f\xc0\x3e\x00\x78\x00\x7e\x00\x1f\xc0\x01\xfc\x00\x1e\x00\x00'\
b'\x00\x00\x0f\x00\x00\x7c\x3f\xfc\x3f\xfc\x3c\x0c\x30\x0c\x30\x0c'\
b'\x30\x0c\x30\x1c\x38\x1c\x38\x1c\x38\x00\x00\x00\x0f\x00\x00\x00'\
b'\x70\x00\x7c\x00\x7f\x80\x7f\xe0\x7f\xfc\x7f\xf0\x7f\xc0\x7f\x00'\
b'\x78\x00\x60\x00\x00\x00'

_index =\
b'\x00\x00\x1a\x00\x34\x00\x4e\x00\x68\x00\x82\x00\x9c\x00\xb6\x00'\

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 65 + 1) if oc >= 65 and oc <= 70 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 12
    return _mvfont[doff + 2:next_offs], 12, width
 
